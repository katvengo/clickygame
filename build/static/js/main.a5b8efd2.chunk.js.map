{"version":3,"sources":["components/images/notebook.png","components/Card/card.js","components/navbar.js","components/hero.js","components/rows.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","styles","image","width","height","Card","props","react_default","a","createElement","key","id","className","onClick","alt","src","style","title","fontFamily","subtitle","fontSize","color","span","paddingLeft","paddingRight","Navbar","Fragment","role","aria-label","href","aria-expanded","data-target","aria-hidden","count","highestScore","hero","backgroundImage","concat","Weather","textAlign","fontStyle","Hero","state","React","Component","totalScores","Rows","cards","michael","clicked","checkForWinner","_this","alert","handleCount","setState","resetData","map","card","Object","objectSpread","resetGame","arrayNum","array","Math","max","apply","toConsumableArray","showHighestScore","handleClickEvent","event","preventDefault","findId","find","imageObject","target","console","log","shuffledArray","score","push","i","length","j","floor","random","temp","_this2","this","navbar","Card_card","App","rows","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5b8efd2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notebook.4fdde868.png\";","import React from 'react';\nimport './style.css'\n\n\nconst styles = {\n  image: {\n    width: 270,\n    height: 215\n  }\n};\n\nfunction Card(props) {\n    return (\n      <div key={props.id} className=\"card cardSpecifyMember\">\n          <button onClick={props.onClick} id={props.id}>\n    <img alt={props.id} src={props.image} style={styles.image} />\n     </button>\n      </div>\n    );\n  }\n  \nexport default Card;","import React from \"react\";\n\nconst styles = {\n  title: {\n    fontFamily: 'Krona One', \n  },\n  subtitle: {\n    fontFamily: 'Acme', \n    fontSize: 25,\n    color: 'black',\n  \n  },\n  span: {\n    paddingLeft: 25,\n    paddingRight: 10\n  }\n\n};\nconst Navbar = props => {\n        return ( \n<>\n<nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n  <div className=\"navbar-brand\">\n    <a className=\"navbar-item\" href=\"https://bulma.io\">\n    </a>\n\n    <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\" href=\"/\">\n      <span aria-hidden=\"true\"></span>\n      <span aria-hidden=\"true\"></span>\n      <span aria-hidden=\"true\"></span>\n    </a>\n  </div>\n\n  <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n    <div className=\"navbar-start\">\n      <a className=\"navbar-item\" href=\"/\" style={styles.subtitle}>\nClickyGame      </a>\n\n        </div>\n      </div>\n\n\n    <div className=\"navbar-end\">\n      <div className=\"navbar-item\" style={styles.subtitle}>\n         <span style={styles.span}>Score: {props.count} </span>\n         <span style={styles.span}>Highest Score:{props.highestScore}</span>\n      </div>\n    </div>\n</nav>\n</>\n    );\n    }\n \nexport default Navbar;","import React from 'react';\nimport Weather from './images/notebook.png'\n\nconst styles = {\n\n  hero: {\n    backgroundImage: `url(${ Weather })`,\n    textAlign: 'center',\n  },\n\n  title: {\n    fontFamily: 'Krona One', \n  },\n  subtitle: {\n    fontFamily: 'Acme', \n    fontStyle: 'italic'\n  }\n\n};\n\n\nclass Hero extends React.Component {\n    state = {  }\n    render() { \n        return (  \n        <section className=\"hero\" style={styles.hero}>\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\" style={styles.title}>\n         The Dunder Mifflin Memory Game</h1>\n            <h2 className=\"subtitle\" style={styles.subtitle}>\n            Click on an image to earn points! Don't click the same image twice!\n            </h2>\n          </div>\n        </div>\n      </section>);\n    }\n}\n \nexport default Hero;","import React from 'react';\nimport Card from './Card/card'\nimport michael from \"../michael.json\"\nimport Navbar from \"./navbar\"\nimport Hero from \"./hero\"\n\nvar totalScores = []\n\nclass Rows extends React.Component {\n    state = { \n        cards: michael,\n        count: 0,\n        highestScore: 0,\n        clicked: false\n     }\n     //Doesn't work\n     //alerts the user when they win the game \n     checkForWinner = () => {\n       if(this.state.count === 12) {\n         alert(\"You win! Click ok to play again\")\n       }\n     }\n\n\n     handleCount = () => {\n        this.setState({ count: this.state.count + 1 });\n      };\n\n resetData = () => {\n   const cards = this.state.cards.map( card => ({...card, clicked: false}))\n  this.setState({\n    cards\n  })\n\n   };\n\n      resetGame = () => {\n        this.setState({count: 0})\n      }\n    \n       arrayNum = array => {\n        return Math.max(...array)\n        }\n\n    showHighestScore = () => {   \n     this.setState({\n       highestScore: this.state.highestScore\n     })\n    }      \n\n    handleClickEvent = event => {\n      event.preventDefault()\n      const findId = this.state.cards.find(imageObject => imageObject.image === event.target.src)\n    if (findId.clicked === false){\n      this.handleCount()\n      this.checkForWinner()\n      console.log(this.state.count)\n      findId.clicked = true\n      this.shuffledArray(this.state.cards)\n    } else if (findId.clicked === true){\n      alert(\"Incorrect Answer!\")\n      this.resetData()\n      var score = this.state.count\n      totalScores.push(score)\n      console.log(\"highest score\" + this.arrayNum(totalScores))\n      this.showHighestScore()\n      this.resetGame()\n      this.shuffledArray(this.state.cards)\n    }\n    return \n   }\n\n\n      shuffledArray = array => {\n        let i = array.length - 1;\n        for (; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        return array;\n      }\n\n\n    render() { \n        return ( \n            <>\n\n        <Navbar \n          count={this.state.count} \n          highestScore={this.highestScore}\n          />\n        <Hero />\n        <div className =\"container is-fluid\">\n        <div className =\"columns is-centered is-multiline\">\n  \n        {this.shuffledArray(michael).map(michael => ( \n        <div className =\"column\" key={michael.id}>\n            <Card \n            id={michael.id}\n            image={michael.image}\n            onClick={this.handleClickEvent}\n            />\n            \n            </div>\n            ))}\n            </div>\n        </div>\n        </>\n);\n    }\n}\n\nexport default Rows;\n\n//Almost there!! \n\n\n//I need to keep track of all of the scores and only output the highest score\n//state => Need a totalScores: [] array. Before the game resets push the count number\n//into the totalScores array. Then use a function to figure out the highest number (go to code challenges for options)\n\n\n","import React from 'react';\nimport './App.css';\nimport Rows from './components/rows';\n\nimport Weather from './components/images/notebook.png'\n\nconst styles = {\n  hero: {\n    backgroundImage: `url(${ Weather })`\n  },\n\n};\n\nfunction App() {\n  return (\n    <div style={styles.hero}>\n      <Rows   />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}